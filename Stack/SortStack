/* Given a stack, the task is to sort it such that the top of the stack has the greatest element. */
/* 
Input:
3  // number of elements
1 2 3   // elements
Output: 3 2 1
*/
#include <iostream>
#include<stack>
using namespace std;

class SortedStack{
    stack<int> s;
public:
	void sort();
	void sortHelper(int);
	void printStack();
	void Push(int&);
};

void SortedStack::Push(int &elm){
    s.push(elm);
}
void SortedStack::printStack()
{
    while (!s.empty())
    {
        printf("%d ", s.top());
       	s.pop();
    }
    printf("\n");
}

int main()
{

	SortedStack *ss = new SortedStack();
	int n;
	int k;
	cin>>n; // number of elements to push
	for(int i=0;i<n;i++)
	{

	cin>>k;
	ss->Push(k);
	}
	ss->sort();
	cout<<"sorted stack:"<<endl;
	ss->printStack();
  return 0;
}




void SortedStack :: sortHelper(int nelm){
    int selm;
    // if stack is empty or current stack elements are less than current
    // element then push new element
    if(s.size() == 0 ||
    s.top() < nelm){
        s.push(nelm);
    }
    else{
        selm = s.top();
        s.pop();
        sortHelper(nelm);
        s.push(selm);
    }
}
void SortedStack :: sort()
{
   //Your code here
   int elm;
   if(s.size() == 0){
       return;
   }
   
   elm = s.top();
   s.pop();
   sort();
   sortHelper(elm);
 }
