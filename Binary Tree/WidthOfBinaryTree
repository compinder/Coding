/*
Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
*/


#include <iostream>
#include<vector>
#include<queue>
using namespace std;
class BinaryTree {
    struct BNode {
        BNode *left;
        BNode *right;      
        int data;
        BNode(int val):data(val) {left = nullptr;right = nullptr;};
    };
  
  BNode *root;
public:
    BinaryTree() {
        root = nullptr;
    }
    BNode* createBinaryTree(vector<int> &arr,int idx);
    BNode *createBNode(int val) {
        return new BNode(val);
    }
    int widthOfBinaryTree();         
};

BinaryTree ::BNode *BinaryTree :: createBinaryTree(vector<int> &arr,int idx){
     
    if(idx >= arr.size() ||
    arr[idx] == -1) {
        return nullptr;
    }
    BNode *newNode;
    int i;
    newNode = createBNode(arr[idx]);
    if(root == nullptr){
        root = newNode;
    }
    i = 2*idx+1;
    newNode->left = createBinaryTree(arr,i);
    i = i+1;
    newNode->right = createBinaryTree(arr,i);
    return newNode;
}

int BinaryTree :: widthOfBinaryTree() {
        queue<pair<BNode *,unsigned long long>> qNodes;
        pair<BNode*,unsigned long long> qnode;
        unsigned long long width = 0, index = 0;;
        unsigned long long rightmostWidth = 0;
        unsigned long long leftmostWidth = 0;
        int size = 0;
        BNode* node = nullptr;
        bool isFirstNode;
        if(root == nullptr){
            return 0;
        }
        qNodes.push({root,0});
        
        while(!qNodes.empty()){
            size = qNodes.size();
            isFirstNode = false;
            while(size != 0){
                qnode = qNodes.front();
                node = qnode.first;
                qNodes.pop();
                if(isFirstNode == false){
                   // firstNode = qNode;
                    leftmostWidth = qnode.second;
                    isFirstNode = true;
                }
                if(size == 1){
                    rightmostWidth = qnode.second;
                    width = (rightmostWidth-leftmostWidth+1)>width?((rightmostWidth-leftmostWidth+1)):width;
                }

                if(node->left != nullptr){
                    index = qnode.second;
                    index = index*2;
                    qNodes.push({node->left,(qnode.second*2)});
                }
                if(node->right != nullptr){
                    index = qnode.second;
                    index = (index*2)+1;
                    qNodes.push({node->right,(qnode.second*2)+1});
                }
                size--;
            }
        }
        return width;
}

int main() {
    vector<int> velms{1,3,2,5,3,-1,9};   // -1 represents null
   
    int index = 0;
    BinaryTree *treeObj;
    treeObj = new BinaryTree();
    treeObj->createBinaryTree(velms,index);
    
    cout<<treeObj->widthOfBinaryTree()<<endl;
    return 0;
}

