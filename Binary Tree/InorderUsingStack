// Online C++ compiler to run C++ program online
#include <iostream>
#include<vector>
#include<stack>
#include<utility>
using namespace std;
class BinaryTree {
    struct BNode {
        BNode *left;
        BNode *right;      
        int data;
        BNode(int val):data(val) {left = nullptr;right = nullptr;};
    };
  
  BNode *root;
public:
    BinaryTree() {
        root = nullptr;
    }
    BNode* createBinaryTree(vector<int> &arr,int idx);
    BNode *createBNode(int val) {
        return new BNode(val);
        
    }
    vector<int> InorderTraversal();
};

 BinaryTree ::BNode *BinaryTree :: createBinaryTree(vector<int> &arr,int idx){
     
    if(idx >= arr.size()) {
        return nullptr;
    }
    BNode *newNode;
    int i;
    newNode = createBNode(arr[idx]);
    if(root == nullptr){
        root = newNode;
    }
    i = 2*idx+1;
    newNode->left = createBinaryTree(arr,i);
    i = i+1;
    newNode->right = createBinaryTree(arr,i);
    return newNode;
}
vector<int> BinaryTree:: InorderTraversal(){
      //Your code here
      stack<BNode*> sNodes;
      vector<int> vres; // {elm,level}
      int size;
      int level = -1;
      BNode *currNode = nullptr;
      BNode *topNode = nullptr;
      if(root == nullptr){
          return vres;
      }
      currNode = root;
      while(!sNodes.empty() ||
      currNode != nullptr){
          while(currNode != nullptr){
              sNodes.push(currNode);
              currNode = currNode->left;
          }
          topNode = sNodes.top();
          vres.push_back(topNode->data);
          sNodes.pop();
          if(topNode->right != nullptr){
              currNode = topNode->right;
          }
      }
      return vres;
}
int main() {
    // Write C++ code here
    vector<int> velms{10,20,30,40,50,60,70,80};
    vector<int> vInOrder;
    int index = 0;
    int prevlevel = 0;
    int currlevel;
    int elm;
    BinaryTree *treeObj;
    
    treeObj = new BinaryTree();
    treeObj->createBinaryTree(velms,index);
    vInOrder = treeObj->InorderTraversal();
    cout<<"Inordering of tree elements: "<<endl;
    for(int i=0;i<vInOrder.size();i++){
        elm =  vInOrder[i];
        cout<<elm<<"  ";
    }
    cout<<endl;
    return 0;
}
