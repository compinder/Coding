/*Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull()
and an additional operation getMin() which should return minimum element from the SpecialStack. Your task is to complete all the functions, using stack data-Structure.*/

/*
Input:
Stack: 18 19 29 15 16
Output: 15
Explanation:
The minimum element of the stack is 15.
*/
#include <iostream>

#include<iostream>
#include<stack>
using namespace std;
void push(stack<int>& s,int a);
bool isFull(stack<int>& s,int n);
bool isEmpty(stack<int>& s);
int pop(stack<int>& s);
int getMin(stack<int>& s);

stack<int> s;
stack<int> sMin;
int main(){

		int n;
		int a[5] = {18,19,29,15,16};
        
        n = sizeof(a)/sizeof(a[0]);
		while(!isEmpty(s)){
		    cout<<"!Empty"<<endl;
		    pop(s);
		}
		int i = 0;
		while(!isFull(s,n)){
			push(s,a[i]);
			i++;
		}
		cout<<"getmin "<<getMin(s)<<endl;

}


void push(stack<int>& s, int a){
	// Your code goes here
//	cout<<"Push"<<endl;
    if(s.empty()){
        while(sMin.empty() == false){
            sMin.pop();
        }
    }
	s.push(a);
	if(isEmpty(sMin) == true){
	    sMin.push(a);
	}
	else{
	    int y = sMin.top();

	    if(a < y){
	        sMin.push(a);
	    }
	    else{
	        sMin.push(y);
	    }
	}

}

bool isFull(stack<int>& s,int n){

	if(s.size() == n){
	    return true;
	}
	return false;
}

bool isEmpty(stack<int>& s){
	// Your code goes here
	if(s.size() == 0) return true;
	return false;
}

int pop(stack<int>& s){
  if(isEmpty(s) == true) return -1;
	int elm = s.top();
	s.pop();
	sMin.pop();
	return elm;
}

int getMin(stack<int>& s){
	// Your code goes here
	/*(int min = 2147483647;

	while(isEmpty(s) == false){
	    int elm = pop(s);
	    if(min > elm){
	        min = elm;
	    }
	}*/
	int min;
	min = sMin.top();
	sMin.push(min);
	return min;
}
